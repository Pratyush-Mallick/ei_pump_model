/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.08.2023 00:54:25

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5456;
#else
constexpr int kTensorArenaSize = 4432;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,645 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 5, 129, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 5, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 3, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 3, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 32, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data6[2] = { -2002, 2002, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 3.5904784454032779e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[2*32] = { 
  53, -93, 50, 108, 110, -71, -25, -107, 11, 97, -52, -85, -110, 95, -55, 63, 92, 56, 65, -48, 76, 37, 1, 32, -31, 13, 108, 10, -21, 27, -127, 94, 
  70, 17, -8, -36, -86, 1, -115, 62, -84, 11, -121, -49, 13, 83, 62, -38, -24, -86, -2, -119, 57, -16, 16, 57, 50, -110, -32, -56, 59, 104, 84, 97, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 2,32 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0038309614174067974, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -1761, -380, -1401, -621, -444, 742, 568, 814, -1901, -946, 1000, -518, 695, 576, 1918, -1051, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.0895367419579998e-05, 4.5473650970961899e-05, 4.8656620492693037e-05, 4.6985303924884647e-05, 3.7919668102404103e-05, 5.278192475088872e-05, 4.2699393816292286e-05, 5.0596645451150835e-05, 4.2070012568728998e-05, 4.349676237325184e-05, 4.9420152208767831e-05, 5.2487826906144619e-05, 5.242270344751887e-05, 4.8048324970295653e-05, 5.3734100220026448e-05, 4.9236557970289141e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 7,7,81,79,-74,-30,-37,64, -22,-25,-24,4,-127,-7,55,-104, 54,74,7,29,-113,-54,90,-3, 
  /* [1][0][][] */ -55,66,-14,69,-33,-101,-58,54, -51,3,-27,33,111,120,73,87, 127,60,46,-111,-41,-35,28,5, 
  /* [2][0][][] */ -48,-4,-49,28,-40,-58,-39,62, 77,-30,46,71,12,-125,-39,127, -100,5,17,-46,-70,-39,36,-1, 
  /* [3][0][][] */ 35,-101,44,-23,41,-39,-120,93, -1,-127,-35,90,-26,-71,-94,54, -88,-29,-38,-4,12,-65,25,70, 
  /* [4][0][][] */ -56,-53,-64,-55,-100,-107,10,110, -115,-85,-64,-75,-80,64,-8,-3, 49,48,76,-69,-127,102,-74,47, 
  /* [5][0][][] */ -67,30,42,60,-37,-110,-50,68, -68,88,-12,-41,113,95,-43,-33, -35,127,68,15,30,30,-29,40, 
  /* [6][0][][] */ 70,-24,47,62,-118,-19,19,39, 29,-107,62,-107,-64,-17,6,101, -46,-127,-64,120,-37,-12,-117,-52, 
  /* [7][0][][] */ 3,117,2,-108,-42,107,127,16, 73,109,88,81,98,89,85,30, 38,48,-63,-47,117,63,120,6, 
  /* [8][0][][] */ 58,-73,96,68,10,-18,95,28, -47,-115,-127,40,56,-40,-116,110, -54,-100,73,96,-17,14,-70,-14, 
  /* [9][0][][] */ 18,-109,36,74,-84,48,33,83, -53,-77,-30,-47,-42,23,-67,64, -35,-100,-51,127,-57,16,-77,127, 
  /* [10][0][][] */ -61,-65,-41,47,25,-33,49,-8, -80,-86,-16,16,-64,-82,-84,49, -47,-35,-19,83,-101,27,-50,127, 
  /* [11][0][][] */ -76,25,-44,85,53,16,-48,-63, -43,-62,25,25,127,-98,7,19, -24,20,-87,51,-76,-62,-73,-46, 
  /* [12][0][][] */ -53,88,-52,101,14,22,127,-22, 70,14,-80,-38,-61,69,-47,-34, 62,70,66,-1,65,-75,-30,22, 
  /* [13][0][][] */ 20,-12,-1,-37,-92,83,-53,-20, 50,56,-46,-5,-127,-99,-80,-82, -68,-8,68,11,47,-96,-97,87, 
  /* [14][0][][] */ 80,47,99,2,15,82,55,-39, 18,127,107,19,35,33,85,-45, 111,-58,43,87,57,-46,50,-54, 
  /* [15][0][][] */ 38,21,-21,-67,-27,-59,-67,71, -17,-55,41,-27,-26,-68,-34,52, -78,-119,43,-46,-127,-47,-9,61, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022965536918491125, 0.0025536555331200361, 0.0027324010152369738, 0.0026385451201349497, 0.0021294478792697191, 0.0029640649445354939, 0.0023978620301932096, 0.0028413466643542051, 0.0023625181056559086, 0.0024426397867500782, 0.0027752784080803394, 0.0029475493356585503, 0.0029438922647386789, 0.0026982410345226526, 0.0030175361316651106, 0.0027649684343487024, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { 7305, 20953, 11960, -10883, 19268, 7595, 15798, -17336, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 5.813226835016394e-06, 6.2405592871073168e-06, 5.581731784332078e-06, 5.2202249207766727e-06, 6.8144872784614563e-06, 5.9956346376566216e-06, 6.8516601459123194e-06, 6.4051268964249175e-06, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*129] = { 
  /* [0][0][][] */ 23,84,-24,-12,-122,-39,1,-47,-44,-63,-27,-106,47,-111,-72,-11,-13,-55,-90,-115,17,-13,23,27,15,11,-28,-115,-39,-116,-96,25,39,-77,22,-47,-35,-49,28,25,4,-12,-68,20,-54,-38,50,-1,-10,-39,27,75,-84,104,13,24,37,0,-21,1,-120,-6,5,-11,-11,-30,31,-15,27,-92,-90,38,-104,-116,-43,-19,42,30,-41,19,27,4,30,-82,74,-90,-71,-15,-82,31,-53,-114,9,-93,-61,-11,-71,-92,20,-58,-14,-62,9,19,-14,-79,-82,0,-25,-42,-88,-95,-32,-35,-70,-40,-33,43,37,59,-45,-68,-7,32,51,11,-34,-1,59, -59,72,55,-27,-23,-3,-115,5,-12,37,-126,98,7,-19,46,2,49,15,64,53,48,-3,61,-75,-79,-69,-13,78,-59,109,30,21,31,-92,23,16,-28,54,-20,83,36,37,55,-19,-18,84,-1,-49,-82,18,-56,-99,28,-62,1,14,-38,-38,58,-5,-88,27,-89,-31,10,79,-44,-42,-36,-19,-55,5,-60,5,-88,33,-21,-108,-49,-99,34,-19,60,-24,-71,59,-64,8,-4,-45,-60,-98,41,105,-22,8,25,-22,42,-11,43,-37,-91,80,50,51,35,72,-6,-9,-99,56,43,29,-35,-19,-59,17,52,-65,-36,-19,-54,-36,-69,13,12,-43,-49, -24,6,-52,15,79,-61,-87,-45,-40,40,-8,69,-49,5,-23,6,2,77,-73,25,25,-27,17,-14,40,-28,-7,-41,69,-54,-28,17,-57,-1,-8,-13,-63,-98,36,-31,-24,56,40,47,18,17,-16,-22,-14,-75,21,-78,-89,16,82,10,49,17,18,-30,-62,51,12,-81,47,31,41,-62,-99,-39,-19,16,110,-85,-51,-26,-27,75,-52,-51,-31,85,-6,-30,73,-7,7,-22,26,127,81,61,19,71,69,-13,15,-65,69,63,-3,-18,6,-44,-45,-91,-7,-11,27,53,18,68,-31,-31,9,-58,-75,-45,58,-44,9,-36,-48,-53,69,-58,-11,37,-19, 
  /* [1][0][][] */ 6,13,-17,57,-49,76,-88,56,-15,-5,-49,-60,12,-86,52,-10,-65,-16,79,87,23,-37,7,10,-16,-83,-83,-60,-66,18,-14,-70,-53,-12,18,18,-67,-52,-6,-16,82,18,-39,62,-47,90,78,79,28,-24,-23,-16,69,-96,-40,23,7,-101,-57,-75,32,35,-81,-44,-87,-21,-46,-20,4,36,3,-16,-20,58,-44,-76,1,-37,4,-78,64,-54,-15,-104,-67,14,71,11,-38,18,-102,18,88,-59,-35,15,-15,46,94,-41,-30,5,-93,31,49,73,-72,75,4,-51,21,-22,13,-78,-11,48,22,-28,-53,9,13,87,-80,18,25,-103,31,-3,-54, 110,73,-76,71,-24,-44,-35,-56,-3,0,-86,-127,35,25,-48,18,30,-84,-39,4,-59,-43,-100,-30,-119,-77,-78,-84,12,-60,-96,-52,-17,-81,-32,45,17,-83,-40,106,81,92,-62,34,18,106,67,-28,79,-56,-2,33,104,63,-8,-61,6,-47,14,-76,-105,-53,57,-90,-49,-69,-20,-89,54,-49,-89,-55,26,-88,15,47,-65,-110,-111,25,-21,42,-63,17,-81,-33,-69,-100,-41,-39,65,-8,56,-8,-29,-65,18,101,-20,3,16,59,-51,-72,64,32,-13,49,39,-43,-77,-44,-38,37,9,35,7,-112,90,17,-30,-13,28,50,36,45,21,-78,31, 33,26,-35,-6,-26,4,19,21,-110,-90,-96,-7,-39,-22,-42,10,43,-21,65,-116,-19,-106,42,-28,42,29,-11,-67,35,-68,-10,18,-6,37,45,-70,-47,-67,70,4,-15,-55,13,67,-46,30,-4,-27,-1,3,6,-49,57,-77,0,39,-36,-13,30,-11,-60,21,-106,-93,43,-105,42,-39,-68,23,17,-58,17,-54,-88,-61,0,77,-63,-6,86,-88,-62,40,40,-39,-66,-4,17,-2,64,62,-70,54,-123,-41,-13,-15,16,-77,-76,-74,39,41,40,-48,37,67,106,17,65,-77,-36,-112,70,-50,85,-20,-74,53,29,-68,11,-52,-86,-97,-62,-1,82, 
  /* [2][0][][] */ 69,85,-80,-14,-46,-82,45,18,-13,3,14,-78,47,-108,-97,20,51,-50,31,-4,127,-41,-41,0,23,-112,-52,-80,-29,-90,-58,7,-91,17,55,-71,58,-51,-51,-47,45,-31,3,-61,-5,-19,-14,-39,64,-78,36,-118,-33,-8,82,7,-89,-91,40,13,-3,52,-51,-56,-34,66,-33,-5,-107,-74,-59,66,-127,49,-11,-92,-104,34,-57,-36,50,-27,-112,1,46,3,60,104,85,-57,-89,-19,54,3,-21,16,-81,-64,113,-83,19,14,-62,-9,68,-75,10,-42,35,25,-4,-16,-36,-34,2,-51,-16,99,-61,-52,39,59,-39,19,-50,37,-29,25,68, 86,35,-44,61,55,-24,12,95,44,2,-83,-13,-89,-61,70,-51,1,21,-46,-18,-98,81,24,-16,-7,17,-36,30,-65,-36,28,-80,8,27,-7,90,-8,-79,86,57,49,-39,17,7,-78,20,7,100,31,42,-64,-25,-31,92,47,-48,-8,3,-79,-2,43,-72,-25,100,41,16,-67,36,-48,-48,6,39,-72,15,9,1,37,-18,63,-5,-47,-16,-56,37,-8,-104,-23,-96,89,27,-4,-30,-48,29,-52,14,-60,24,-116,40,15,33,43,3,69,73,60,-38,-50,-117,22,40,-56,14,-76,58,53,-82,22,8,35,-50,58,-64,-52,87,-23,2,-9, -20,88,73,58,-12,15,-44,26,-13,-87,-50,-59,0,50,21,-5,-70,-79,-40,-61,72,-13,25,-11,-118,-85,7,-26,-98,-38,-10,69,35,-27,10,-3,-65,2,-26,-71,-12,98,-73,-21,85,-7,15,87,-32,-16,-50,-96,120,64,11,-65,-88,-4,-80,-63,-5,96,-98,1,12,-88,-82,45,71,-92,-63,-57,32,-49,-12,-16,27,44,11,5,64,29,-45,-51,17,22,72,42,61,-42,45,86,13,-49,21,39,27,63,-51,0,-124,-72,-65,-9,3,28,116,-76,-54,51,-98,-33,-50,17,-14,63,65,24,-5,-28,34,-57,-9,36,98,42,50,36,-60, 
  /* [3][0][][] */ -126,-35,38,-46,57,-71,87,-8,52,-78,34,-47,-6,38,57,33,87,38,52,36,32,90,61,92,47,127,91,-56,99,70,55,48,108,51,14,49,-42,-5,-80,59,-33,1,15,-1,18,51,104,-26,53,54,-96,-12,-34,-74,83,-50,112,71,29,33,51,63,14,80,-10,-83,97,-41,60,2,117,121,37,-21,-47,-3,-17,-41,86,-17,28,-39,48,-90,77,22,2,-43,-31,10,56,-15,-73,-18,-56,32,-8,29,-20,113,-71,47,-70,22,-46,59,71,-3,27,-69,88,-33,-45,-8,-1,-13,5,-115,-79,-30,34,-91,-50,58,55,-14,-102,21,-63, -51,-48,-5,-46,-13,98,46,115,33,-21,-36,-75,11,68,82,41,-15,6,-38,-60,83,112,74,-49,4,-51,100,-15,-60,-11,-40,-56,77,-22,51,32,42,83,14,-40,-42,-67,-6,-22,62,34,40,-46,-79,72,80,-53,-44,41,86,127,11,84,7,46,64,43,47,-55,102,-18,35,73,-38,69,42,15,44,92,-38,-28,78,-15,-13,-25,95,-26,-98,36,-45,72,16,-69,54,62,18,32,-27,28,1,62,60,60,-86,-88,78,-65,-94,-43,-21,39,59,35,10,-14,32,-61,41,-68,-45,54,78,-20,69,80,76,-35,13,-48,31,89,73,55,72, -118,-79,-34,6,-16,-3,-71,36,20,-92,-53,19,27,-22,26,-40,-41,-74,-27,77,-107,-79,20,7,-40,65,27,-27,-86,7,-26,-47,-62,-66,2,9,-88,55,39,-20,27,4,-91,85,86,30,35,-4,20,-13,-72,-28,-68,-1,-6,37,-13,33,-31,-79,-68,-38,17,108,-45,-25,-86,-23,16,-93,21,-76,-26,22,55,55,58,-25,-65,16,27,-17,-63,-109,51,-5,5,0,-69,-74,30,72,105,3,22,69,19,28,-22,80,102,8,31,60,-11,63,48,-19,-31,-46,-26,-4,18,-61,-4,24,-83,-39,63,-84,-24,-9,24,9,-63,39,97,-59,-28, 
  /* [4][0][][] */ 112,11,17,72,-41,-15,-6,53,-46,-5,-67,6,16,42,-63,43,-54,-59,-46,-76,-63,-76,-95,-48,-75,-5,-55,34,22,5,-42,-20,-46,-38,33,-69,-34,46,-11,40,54,18,48,-40,-33,10,51,0,31,-5,22,7,-5,52,-46,-35,-90,-4,29,-41,-28,16,23,48,-17,74,15,-7,3,21,-77,54,-89,-97,85,-11,-18,-30,-47,-4,71,-58,-103,49,-73,-73,13,32,-47,-44,-22,69,77,69,-68,21,-59,-70,-1,-8,-10,-17,8,-32,-20,-81,-53,0,-48,58,6,-73,18,3,-36,45,89,52,15,-48,-18,-49,-76,-2,-33,37,40,-66,-74, 67,-4,-73,-12,-49,-86,-45,-73,24,30,-72,13,-45,36,16,-53,52,-17,68,-4,-50,-57,-54,-50,-16,45,27,-75,-81,-64,-16,-10,7,-74,-79,35,-45,45,23,83,-5,-74,43,23,-47,33,-49,27,-61,-9,-50,21,26,-17,-73,37,-17,-2,-46,-127,34,-42,-30,15,-79,-2,-56,-76,50,33,11,50,-5,-5,-48,11,25,79,11,-68,-36,3,56,-10,-3,36,5,-74,-51,45,-42,26,-15,-78,-4,-45,-30,-65,-53,-98,70,51,23,33,-24,-18,27,-73,-91,16,-28,-15,5,34,30,-32,-94,34,-45,-53,-2,-46,-31,-55,-16,-5,8,57,14, 84,29,29,-19,-43,86,62,-73,-47,1,-23,44,-73,35,-45,-28,-52,-76,-28,7,32,9,-49,12,18,27,-112,54,-99,51,60,-1,-58,-76,13,-59,53,-75,64,15,14,-46,43,39,3,46,20,-28,22,46,-38,-30,-78,10,-12,-32,-10,52,-98,-51,61,-97,-61,-80,-29,34,34,-24,-7,-68,43,9,11,24,0,-5,-1,-27,-22,-28,16,10,7,38,29,68,-31,-25,36,2,36,-54,33,1,-14,-14,-22,42,89,-41,-50,-37,38,-60,-21,-21,33,63,-100,15,-82,36,-83,-32,-67,-77,22,-47,16,37,23,23,-18,-17,7,-63,43,39,-25, 
  /* [5][0][][] */ -5,41,2,-2,27,-6,-24,-32,-46,77,-46,45,11,69,-48,-28,-98,-15,-29,112,-60,-23,71,-96,-10,-104,-15,54,-62,62,-78,52,-12,1,35,8,-26,-65,49,-35,-81,-82,31,60,10,-14,-95,-60,-52,-24,-95,-112,-26,62,-39,-27,-11,-42,69,77,28,-48,8,57,-57,-13,-81,47,-4,16,-21,-42,-71,44,-54,-24,12,83,-62,-58,89,-68,35,-21,11,23,-30,0,33,71,21,30,-7,27,-42,40,35,-8,23,-59,63,75,-38,33,-48,-53,47,38,-2,-29,-1,102,-31,-57,-42,-44,-3,-97,38,47,40,74,-1,-57,12,49,2,-21,105, -12,59,-70,-60,-76,54,45,47,-94,37,-97,32,-8,58,-30,-97,33,39,-92,26,-36,-1,-41,66,-73,-102,-1,-43,-45,25,47,-56,54,-10,-2,42,-23,48,-108,-14,32,75,3,-36,28,-16,60,-67,-81,32,-44,92,97,-16,-6,33,-113,40,72,-81,-12,-26,-82,-40,-57,-59,26,19,63,13,-39,-76,-42,-58,69,-94,-61,-30,27,-50,12,-15,12,-23,47,39,23,28,-41,-63,12,38,-4,-57,4,79,-14,26,52,32,77,-67,-63,20,-21,-28,-8,-99,50,64,34,-16,-80,-98,-97,-50,11,-40,-32,-41,-61,-59,17,88,-69,22,66,6,-4, 19,8,11,-47,38,-32,-77,93,-5,-127,-49,53,21,2,-52,14,-107,-11,78,-81,-78,-73,51,-90,10,-69,-15,29,-92,83,38,18,10,11,15,37,80,13,42,-53,47,-21,-111,20,-98,-107,84,-53,-47,-53,76,63,-5,50,-39,48,10,-47,-87,9,-28,30,-72,39,84,7,29,-8,-99,-35,-27,16,-46,-10,-62,-62,48,35,-106,60,14,-30,-6,3,-38,11,44,85,-66,38,-42,-30,37,75,38,-94,-81,-23,14,-29,-9,83,-1,-8,86,-13,-11,69,18,29,-19,1,77,17,-59,-29,10,29,-28,6,-36,69,62,-108,-52,-52,-55,57,-14, 
  /* [6][0][][] */ 95,127,13,35,15,-19,-39,-15,-90,-103,-43,-59,-72,-38,5,-29,-40,49,-15,14,-29,27,-29,13,-38,-15,65,-14,11,-34,-17,-111,20,-52,-55,48,-48,41,-56,-29,-47,-42,39,4,-35,67,38,39,22,2,-28,49,-40,25,55,-40,-65,-43,30,18,-11,-74,-25,-4,-47,56,-17,49,-25,-63,70,13,-45,49,-58,3,34,54,-32,-45,-3,-60,-70,-46,-58,-65,10,14,25,75,-63,-57,2,-70,-65,-78,44,-57,16,-9,8,-68,18,30,4,-27,-79,-16,23,15,-61,3,-12,7,-24,83,-39,-56,-62,-1,2,-62,0,40,-116,-91,-31,-43,-43, 8,-2,4,-7,-14,-59,10,-33,-71,60,-94,6,36,-25,-26,-82,47,32,-38,-21,28,-80,21,-48,6,-39,40,-70,15,41,46,2,-34,25,-38,-35,-80,65,-42,60,-27,-37,3,-38,27,64,25,19,-69,-5,26,-32,94,32,-52,-44,-4,15,-100,28,4,-8,-57,21,-57,24,-7,-12,-44,91,13,46,23,-52,-66,19,-21,-90,36,-54,-24,-17,-24,-11,44,12,56,35,-9,9,29,-16,-78,6,-31,-55,-30,-66,57,76,45,-9,-16,-14,-60,-49,-17,-28,29,9,-59,-47,76,52,7,-22,-98,87,32,31,-36,-65,-100,-58,51,81,23,-24,-49, 85,63,64,-62,-26,-29,-22,-29,5,38,-102,-74,-48,-35,-43,-12,14,-29,-28,14,16,-31,28,44,-66,27,-69,-7,-110,-73,26,-84,15,48,70,58,16,-84,44,40,-19,-58,-51,-47,33,-41,-36,-40,-17,-102,-51,-11,-11,-44,34,47,51,-20,-43,17,-11,-37,-32,28,-6,-83,-22,1,-43,-79,-39,-77,-50,-6,30,-122,-25,28,7,12,2,-65,-51,65,38,-117,79,53,-90,4,30,5,-5,-45,54,-68,-35,-15,-37,93,27,-65,-9,22,-19,-101,75,32,20,-5,-30,15,78,74,6,-20,-20,-55,-27,-76,30,46,-29,65,6,61,40,19,35, 
  /* [7][0][][] */ -11,-53,50,59,72,61,1,81,17,26,108,-21,69,-23,37,33,10,103,18,-1,22,63,-11,14,95,12,45,108,116,96,14,20,87,114,-2,-2,65,6,43,-23,-21,24,-3,-6,-28,-45,27,63,27,46,70,-19,2,19,-55,23,6,24,40,3,23,63,63,62,34,24,4,59,72,17,-34,45,80,45,79,75,24,88,21,36,25,-26,-27,-6,-45,-23,8,4,-8,30,-28,32,-46,60,35,16,51,92,46,-6,7,49,57,33,-17,84,15,77,-14,56,42,36,-5,-12,-91,48,-24,-29,18,14,-50,-28,3,9,27,-31,33,-10,30, -23,-63,78,-27,31,49,-9,45,2,70,18,-13,101,-19,31,1,64,-23,31,-12,89,25,34,54,64,80,88,62,114,25,69,87,57,-8,78,38,9,24,-13,-16,-43,-15,12,-14,16,-15,-44,-45,-19,47,80,25,58,-27,-11,25,32,76,65,96,84,38,21,99,73,-16,12,73,79,62,15,99,-15,71,95,37,61,56,-5,-17,-32,51,101,-25,-37,30,12,33,-10,65,0,67,57,-28,64,14,-17,6,35,-27,15,34,20,67,-19,-34,-55,63,-7,21,-13,28,-40,0,52,-38,14,28,6,18,-69,-15,23,12,26,69,5,34,-49, -8,-127,23,42,8,66,82,5,34,26,120,-10,98,101,69,-13,76,-27,57,36,47,70,48,-4,57,54,2,97,102,97,-7,47,80,7,42,49,8,22,26,-14,14,-27,-24,9,78,45,29,-1,3,47,7,15,51,16,20,31,88,11,2,0,-18,31,4,43,29,52,34,46,40,-17,92,19,5,29,91,27,74,5,-16,-40,-1,66,-23,-4,52,54,55,-13,50,80,38,-9,8,-12,76,33,-27,62,-25,3,37,23,45,103,33,-40,66,7,50,5,-32,59,80,10,-19,-27,19,37,36,-35,-34,58,-21,-23,82,27,-33,16,42, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,129 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0014823727542534471, 0.0015913425013422966, 0.0014233415713533759, 0.0013311572838574648, 0.0017376941395923495, 0.0015288867289200425, 0.0017471732571721077, 0.0016333073144778609, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,5,129 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,5,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.017807276919484138, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,5,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.017807276919484138, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,3,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.017807276919484138, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,3,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.017807276919484138, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,3,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0093722650781273842, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0093722650781273842, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,2,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0093722650781273842, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0093722650781273842, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.022772684693336487, } };
const TfArray<1, int> quant21_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 645, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 3096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1552, (TfLiteIntArray*)&tensor_dimension12, 645, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2208, (TfLiteIntArray*)&tensor_dimension13, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension15, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension16, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension17, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 48, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 32, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {
  if (i < 0) {
    tensor->data.data = nullptr;
    tensor->dims = nullptr;
    return;
  }

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
